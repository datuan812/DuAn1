/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package cores.webCam.view;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author QUOC HUY
 */
public class WebCamPanel extends javax.swing.JPanel {

    /**
     * Creates new form WebCamPanel
     */
    private WebcamPanel jpanl = null;
    private Webcam webcam1;

    public WebCamPanel() {
        initComponents();

        String input = JOptionPane.showInputDialog(this, "Mời bạn chọn cổng (Ví dụ: 0, 1, 2, ... => Cổng mạc định là 0)", "Lựa chọn !!!", JOptionPane.QUESTION_MESSAGE);
        int cong = 0;
        try {
            cong = Integer.parseInt(input);
            initWebCame(cong);
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        
    }

    public void initWebCame(int cong) {
        try {
            webcam1 = Webcam.getWebcams().get(cong); // Camera 1
            webcam1.setViewSize(WebcamResolution.VGA.getSize()); // set size
            jpanl = new WebcamPanel(webcam1);
            webcam1.open();

            mainCam.add(jpanl);
            mainCam.setLayout(new FlowLayout());
            jpanl.setVisible(true);

        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Cam không có kết nối");
            e.printStackTrace();
            this.setVisible(false);
            webcam1.close();
        }

    }

    public static String readQR(String path, String charset,
            Map hashMap)
            throws FileNotFoundException, IOException,
            NotFoundException {
        BinaryBitmap binaryBitmap
                = new BinaryBitmap(new HybridBinarizer(
                        new BufferedImageLuminanceSource(
                                ImageIO.read(
                                        new FileInputStream(path)))));

        Result result
                = new MultiFormatReader().decode(binaryBitmap);

        return result.getText();
    }

    public void test() throws IOException, FileNotFoundException, NotFoundException, InterruptedException {
        BufferedImage image = webcam1.getImage();
        Thread.sleep(3000);
        File fileImg = new File("D:\\Du_an_1\\src\\main\\resources\\cde.png");
        ImageIO.write(image, "png", fileImg);

        // The path where the image will get saved
        String path = "D:\\Du_an_1\\src\\main\\resources\\cde.png";

        // Encoding charset
        String charset = "UTF-8";

        Map<EncodeHintType, ErrorCorrectionLevel> hashMap
                = new HashMap<>();

        hashMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);

        System.out.println(readQR(path, charset, hashMap));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRound1 = new utilities.palette.PanelRound();
        mainCam = new javax.swing.JPanel();
        buttonGradient1 = new utilities.palette.ButtonGradient();

        panelRound1.setBackground(new java.awt.Color(221, 242, 244));
        panelRound1.setRoundBottomLeft(50);
        panelRound1.setRoundBottomRight(50);
        panelRound1.setRoundTopLeft(50);
        panelRound1.setRoundTopRight(50);

        javax.swing.GroupLayout mainCamLayout = new javax.swing.GroupLayout(mainCam);
        mainCam.setLayout(mainCamLayout);
        mainCamLayout.setHorizontalGroup(
            mainCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
        );
        mainCamLayout.setVerticalGroup(
            mainCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 509, Short.MAX_VALUE)
        );

        buttonGradient1.setText("Chụp");
        buttonGradient1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        buttonGradient1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGradient1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound1Layout = new javax.swing.GroupLayout(panelRound1);
        panelRound1.setLayout(panelRound1Layout);
        panelRound1Layout.setHorizontalGroup(
            panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound1Layout.createSequentialGroup()
                .addGroup(panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRound1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(mainCam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelRound1Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(buttonGradient1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(349, Short.MAX_VALUE))
        );
        panelRound1Layout.setVerticalGroup(
            panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(mainCam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(buttonGradient1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGradient1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGradient1ActionPerformed
        try {
            test();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi hệ thống");
            ex.printStackTrace();
            this.setVisible(false);
            webcam1.close();
        } catch (InterruptedException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi hệ thống");
            ex.printStackTrace();
            this.setVisible(false);
            webcam1.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Lỗi hệ thống");
            ex.printStackTrace();
            this.setVisible(false);
            webcam1.close();
        }

    }//GEN-LAST:event_buttonGradient1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private utilities.palette.ButtonGradient buttonGradient1;
    private javax.swing.JPanel mainCam;
    private utilities.palette.PanelRound panelRound1;
    // End of variables declaration//GEN-END:variables
}
